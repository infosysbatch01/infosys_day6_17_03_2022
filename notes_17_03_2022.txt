
// Arrays and reference type

    public class ArrayDemo1 {

     public static void main(String args[]){
      int num[]=new int[3];
      Scanner scan=new Scanner(System.in);
      for(int i=0;i<num.length;i++){
            num[i]=scan.nextInt();
      }
      for(int x : num){
       System.out.println(x);
      }
    }
   }
---------------------------------------
  public class Student{
     private int roll;
     private String name;
	public int getRoll() {
		return roll;
	}
	public void setRoll(int roll) {
		this.roll = roll;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
   
    // setter/getter methods
     
   }

  
import java.util.Scanner;

public class StudentMain{ 
    public static void main(String args[]) {
        Student student[]=new Student[3];
        Scanner scan=new Scanner(System.in);
        for(int i=0;i<student.length;i++) {
              int roll=scan.nextInt();
      /* Exception in thread "main" java.lang.NullPointerException: Cannot invoke "Student.setRoll(int)" because "student[i]" is null
	at StudentMain.main(StudentMain.java:9)    */    
              student[i].setRoll(roll);
              String name=scan.next();
              student[i].setName(name);
        }
          for(int i=0;i<student.length;i++) {
            System.out.println(student[i].getRoll());
            System.out.println(student[i].getName());
        }
      }
  }

--------------------------------------------------------------

public class StudentMain{ 
    public static void main(String args[]) {
        Student student[]=new Student[3];  // Creating an array of references
        // to store the address of multiple student objects
        Scanner scan=new Scanner(System.in);
        for(int i=0;i<student.length;i++) {
               student[i]=new Student();
       // The above statment we should not miss because it is initialising the
       // array elements with the object. If we dont perform we get NullPointerException
              student[i].setRoll(roll);
              String name=scan.next();
              student[i].setName(name);
        }
          for(int i=0;i<student.length;i++) {
            System.out.println(student[i].getRoll());
            System.out.println(student[i].getName());
        }
      }
  }
----------------------------------------------------------------------------------------------------
Why main method is static?
      public class Demo {
            public static void main(String args[]){
 
           }
    }

When we execute the code, JVM ( Java virtual Machine) needs to call the main method. But we know
that if the method is non-static , we need to create an object of the class and access the method.
Now if it would have been main mathod as non static, then we would require the object of the class
which is having the main method.

 public class Demo {
            public  void main(String args[]){
 
           }
    }

    Demo demo=new Demo();
    demo.main();

But we know execution starts from main, so until unless main starts we dont have a scope of
creating the object. But we know if the method is static it can be called with the class name.
So when we compile our code it creates the .class file which contains the class info. With that
class the JVM can call the static main method.

    Demo.class
    Demo.main() 

-----------------------------------------------------------------------------------------------------

public class Food {
	private String foodName;
	private String cuisine;
	private String foodType;
	private int quantityAvailable;
	private double unitPrice;
	public String getFoodName() {
		return foodName;
	}
	public void setFoodName(String foodName) {
		this.foodName = foodName;
	}
	public String getCuisine() {
		return cuisine;
	}
	public void setCuisine(String cuisine) {
		this.cuisine = cuisine;
	}
	public String getFoodType() {
		return foodType;
	}
	public void setFoodType(String foodType) {
		this.foodType = foodType;
	}
	public int getQuantityAvailable() {
		return quantityAvailable;
	}
	public void setQuantityAvailable(int quantityAvailable) {
		this.quantityAvailable = quantityAvailable;
	}
	public double getUnitPrice() {
		return unitPrice;
	}
	public void setUnitPrice(double unitPrice) {
		this.unitPrice = unitPrice;
	}
}


public class Order {
	private int orderId;
	private Food orderedFoods;
	private double totalPrice;
	private String status;
	public Order(int orderId, Food orderedFoods,String status) {
		this.orderId = orderId;
		this.orderedFoods = orderedFoods;
		this.status = status;
	}
	public int getOrderId() {
		return orderId;
	}
	public void setOrderId(int orderId) {
		this.orderId = orderId;
	}
	public Food getOrderedFoods() {
		return orderedFoods;
	}
	public void setOrderedFoods(Food orderedFoods) {
		this.orderedFoods = orderedFoods;
	}
	public double getTotalPrice() {
		return totalPrice;
	}
	public void setTotalPrice(double totalPrice) {
		this.totalPrice = totalPrice;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
}



public class Tester {
	public static void main(String[] args) { 
		Food food = new Food(); 
		food.setFoodName("Pizza Margherita"); 
		food.setCuisine("Italian"); 
		food.setFoodType("Veg"); 
		food.setQuantityAvailable(10); 
		food.setUnitPrice(8.0); 
		Order order = new Order(101, food,"Ordered"); 
		 
		System.out.println("Order placed successfully!"); 
		// In line 15,Food food1=order.getOrderedFoods();
		// System.out.println(food1.getFoodName());
		System.out.println("You have ordered: "+ order.getOrderedFoods().getFoodName()); 
		System.out.println("Order status: "+ order.getStatus());
	} 
	
}
------------------------------------------------------------------------------------------------
An Employee is having a name. Name is further having firstName and lastName

   public class Employee{
    private int id;
    private String firstName;
    private String lastName;
    private String desig;
    private String dept;
 
    setter/getter
  }
---------------------------------------------------------------------------------------------------
 public class Name {
    private String firstName;
    private String lastName;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
   
   // setters/getters

  }

  
  public class Employee{
    private int id;
    private Name name;
    private String desig;
    private String dept;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public Name getName() {
		return name;
	}
	public void setName(Name name) {
		this.name = name;
	}
	public String getDesig() {
		return desig;
	}
	public void setDesig(String desig) {
		this.desig = desig;
	}
	public String getDept() {
		return dept;
	}
	public void setDept(String dept) {
		this.dept = dept;
	}
    
    // setters/getters
    
  }

  

 public class EmployeeMain{
   public static void main(String args[]) {
     Name name=new Name();
     Employee emp=new Employee();
     name.setFirstName("Rajesh");
     name.setLastName("Sharma");
     emp.setId(1);
     emp.setName(name);
     emp.setDesig("Manager");
     emp.setDept("HR");
     System.out.println(emp.getId());
     System.out.println(emp.getName());  //Name@379619aa
     System.out.println(emp.getName().getFirstName());
     // emp.getName().getFirstName() emp.referenceofnametype.getFirstName(); 
     System.out.println(emp.getName().getLastName());
     name=emp.getName();
     System.out.println(emp.getId());
     System.out.println(name.getFirstName());
     System.out.println(name.getLastName());
     System.out.println(emp.getDesig());
     System.out.println(emp.getDept());
    }
   }
 

   
  String str="Welcome";
  // String toUpperCase();
  str.toUpperCase().length();
   WELCOME.length();
  
  String upper=str.toUpperCase();
  int length=upper.length();

  -----------------------------------------------------------------------------------------------------

Design a class Customer with customerId, customerName and address. Address is a class with houseNo,
 streetName,city,state.Design the classes with the understanding of Aggregation concept.


public class Customer {
  private int customerId;
  private String customerName;
  private Address address;
 
 // setters/getters
}

public class Address {
   private String houseNo;
   private String streetName;
   private String city;
   private String state;

 // setters/getters
}

public class CustomerMain {
   public static void main(String args[]) {
      Address address=new Address();
      Customer customer=new Customer();
      
  }
} 
-------------------------------------------------------------------------------------------------------
// A customer can have 2 addresses. 
public class CustomerDetails {
  private int customerId;
  private String customerName;
  private Address addresses[];
 
 // setters/getters
}

public class CustomerDetailsMain {
   public static void main(String args[]) {
      Address addresses[]=new Address[2];
      Scanner scanner=new Scanner(System.in);
      for(int i=0;i<address.length;i++)
         {
             addresses[i]=new Address();
             System.out.println("Enter house number");
             String houseNo=scanner.next();
             addresses[i].setHouseNo(houseNo);
             System.out.println("Enter the street name");
             String streetName=scanner.nextLine();
             addresses[i].setStreetName(streetName);
             System.out.println("Enter the city name");
             String cityName=scanner.nextLine();
             addresses[i].setCityName(cityName);
             System.out.println("Enter the state name");
             String stateName=scanner.next();
             addresses[i].setStateName(stateName);
         }
        
      Customer customer=new Customer();
      System.out.println("Enter the customer's id");
      int id=scanner.nextInt();
      scanner.nextLine();
      customer.setCustomerId(id);
      System.out.println("Enter the customer's name");
      String name=scanner.nextLine();
      customer.setCustomerName(name);
      customer.setAddress(addresses);
      System.out.println("The details of Customer");
      System.out.println(customer.getCustomerId());
      System.out.println(customer.getCustomerName());
      addresses=customer.getAddresses();
      for(Address address : addresses){
             System.out.println(address.getHouseNo());
             System.out.println(address.getStreetName());
      }
    }
} 
-------------------------------------------------------------------------------------
public class Name {
    private String firstName;
    private String lastName;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
   
   // setters/getters

  }

public class GiftVoucher{ 
    private String voucherId;
    private int amount;
    private String validity;
   // setter/getter
	public String getVoucherId() {
		return voucherId;
	}
	public void setVoucherId(String voucherId) {
		this.voucherId = voucherId;
	}
	public int getAmount() {
		return amount;
	}
	public void setAmount(int amount) {
		this.amount = amount;
	}
	public String getValidity() {
		return validity;
	}
	public void setValidity(String validity) {
		this.validity = validity;
	}

 }

  
  public class EmployeeDetails{
    private int id;
    private Name name;
    private String desig;
    private String dept;

        
// setters/getters
public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public Name getName() {
		return name;
	}
	public void setName(Name name) {
		this.name = name;
	}
	public String getDesig() {
		return desig;
	}
	public void setDesig(String desig) {
		this.desig = desig;
	}
	public String getDept() {
		return dept;
	}
	public void setDept(String dept) {
		this.dept = dept;
	}
    
    
      public void appreciation(GiftVoucher voucher){
        System.out.println("ID "+voucher.getVoucherId());
        System.out.println("AMOUNT "+voucher.getAmount());
        System.out.println("VALID TILL "+voucher.getValidity());
        }
    
  }


public class EmployeeDetailsMain{
   public static void main(String args[]) {
     Name name=new Name();
     name.setFirstName("Rajesh");
     name.setLastName("Sharma");
     
     GiftVoucher voucher=new GiftVoucher();
     voucher.setVoucherId("V00001");
     voucher.setAmount(1000);
     voucher.setValidity("31-Dec-2024");
     
     EmployeeDetails emp=new EmployeeDetails();
     emp.setId(1);
     emp.setName(name);
     emp.setDesig("Manager");
     emp.setDept("HR");
   
     System.out.println(emp.getId());
     System.out.println(emp.getName());  //Name@379619aa
     System.out.println(emp.getName().getFirstName());
     // emp.getName().getFirstName() emp.referenceofnametype.getFirstName(); 
     System.out.println(emp.getName().getLastName());
     name=emp.getName();
     System.out.println(emp.getId());
     System.out.println(name.getFirstName());
     System.out.println(name.getLastName());
     System.out.println(emp.getDesig());
     System.out.println(emp.getDept());
     emp.appreciation(voucher);
    }
   }
 -----------------------------------------------------------------------------------------------------
Design a class Customer with customerId, customerName and address. Address is a class with houseNo,
streetName,city,state.Customer perform payment through CreditCard. CreditCard is having id,providersName,validity. Design the classes with the understanding of Aggregation and Association concept.

-----------------------------------------------------------------------------------------------------	
Inheritance
  public class Base1 {
    private int num;
       
    public void setBase(int num){
      this.num=num;
    }
    private void disp(){
      System.out.println("The private method");
     }
    public void dispBase(){
      System.out.println(num);
    }

 public class Derived1 extends Base1 {
    private int num2;
   /* In the following method in setDerived method we are trying to access the private '
     member of the base class and trying to set the value as 10 */
    public void setDerived(){
        //num=10; private members of the base class is not accessible by the derived class
        num2=20;
    }          
   
   public void dispDerived(){
     disp();  // So this line will show error because disp() is the
     // private member of the base class
     dispBase(); // Yes we can access dispBase as it is a public
     // member of the base class. We dont require object of the
     // base class to access it from the derived class.
    //System.out.println(num);
    System.out.println(num2);
   }
 }

  public class InheritDemo1{
  {
  public static void main(String args[])
  {
       Base1 base=new Base1();
       base.setBase(10);
       base.dispBase();    //10
       base.disp();
       Derived1 derived=new Derived1();
       derived.setBase(100);
       derived.dispBase();    //100
       derived.setDerived();
       derived.dispDerived();
       derived.disp();
  }
 }
-----------------------------------------------------------------------------------------------
 
class Customer {
	//Parent/Super/Base class
}
class RegularCustomer extends Customer {        // RegularCustomer is a Customer
	//Child/Sub/Derived class
}
class Guest extends Customer {                  // Guest is a Customer
	//Child/Sub/Derived class
}

In the above example if we want to represent a Customer
   Customer customer=new Customer();
If we want to represent RegularCustomer in that case we need to create the
object of RegularCustomer only.
  RegularCustomer regularCustomer=new ReegularCustomer();
------------------------------------------
class Customer1 {
	public Customer1() {
		// 3: Parent constructor will be executed
		System.out.println("Creating a customer...");
		// 4: The flow will go back to the child constructor
	}
}
class RegularCustomer1 extends Customer1 {
	public RegularCustomer1() {
		// 2: This constructor will then call the parent constructor
		System.out.println("It is a regular customer!");
		// 5: The flow will finally come here
	}
}
public class Tester1 {
	public static void main(String[] args) {
		RegularCustomer1 regularCustomer = new RegularCustomer1();
		// 1: This line will be executed first and the flow will go to [2]
	}
}
-----------------------------------------------------------------------
public class Customer2 {
	private String customerId;
	private String customerName;

	public Customer2(String customerId, String customerName) {
		this.customerId = customerId;
		this.customerName = customerName;
		System.out.println("I am the base class parameterized constructor");
	}
 
	public Customer2() {
		System.out.println("Parent Default Constructor");
	}

	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println();
	}
}


public class RegularCustomer2 extends Customer2 {
	private float discount;
	public RegularCustomer2(String custId, String custName) {
		setCustomerId(custId);
		setCustomerName(custName);
		discount = 5.0f;
		System.out.println("Child class parameterized Constructor");
	}
	public float getDiscount() {
		return discount;
	}
	public void setDiscount(float discount) {
		this.discount = discount;
	}
}

public class Tester2 {
	public static void main(String[] args) {
		RegularCustomer2 regularCustomer = new RegularCustomer2("C1010",
				"Johns Kora");
		regularCustomer.displayCustomerDetails();
	}
}
-----------------------------------------------------------------
THE PARAMETERIZED CONSTRUCTOR OF SUB CLASS WILL CALL THE PARAMETERLESS CONSTRUCTOR OF THE BASE CLASS
UNTIL UNLESS THE PARAMETERIZED CONSTRUCTOR OF BASE CLASS IS EXPLICITLY BEING CALLED.THE EXPLICIT CALL
IS DONE THROUGH SUPER KEYWORD.

public class Customer3 {
	private String customerId;
	private String customerName;

	public Customer3(String customerId, String customerName) {
		this.customerId = customerId;
		this.customerName = customerName;
		System.out.println("I am the base class parameterized constructor");
	}
 
	public Customer3() {
		System.out.println("Parent Default Constructor");
	}

	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println();
	}
}



public class RegularCustomer3 extends Customer3 {
	private float discount;
	public RegularCustomer3(String custId, String custName) {
		/*setCustomerId(custId);
		setCustomerName(custName);*/
                super(custId,custName);
		discount = 5.0f;
		System.out.println("Child Class Parameterized Constructor");
	}
	public float getDiscount() {
		return discount;
	}
	public void setDiscount(float discount) {
		this.discount = discount;
	}
}

public class Tester3 {
	public static void main(String[] args) {
		RegularCustomer3 regularCustomer = new RegularCustomer3("C1010",
				"Johns Kora");
		regularCustomer.displayCustomerDetails();
	}
}
-----------------------------------------------------------------------------------------------
* Derived class parameterless constructor calls the base class parameterless constructor.

   public class Base2 {

   public Base2(){
    System.out.println("I am the parameterless or default constructor");
   }
  }
  public class Derived2 extends Base2 {
   public Derived2(){
   System.out.println("I am the parameterless or default constructor of the derived class");
   }
 }
 
  public class Inherit2{
    public static void main(String args[]){
     Derived2 derived=new Derived2();
    }
  }
---------------------------------------------------------------------------------------------
// Default constructor of the Derived class calls the default constructor of the base class, provided
during the compilation
public class Base3 {

 
  }
  public class Derived3 extends Base3 {
  
 }
 
  public class Inherit2{
    public static void main(String args[]){
     Derived3 derived=new Derived3();
    }
  }      
  }
--------------------------------------------------------
// Parameterized constructor of the derived class calls the parameterless constructor of the Base class.

public class Base4 {
   
  public Base4(){
    System.out.println("I am the parameterless constructor of the base");
  }
 
  }
  public class Derived4 extends Base4 {
 
    public Derived4(int a,int b){
     System.out.println("I am the parameterized constructor of the subclass");
    } 
 }
 
  public class Inherit4{
    public static void main(String args[]){
     Derived4 derived=new Derived4(1,2);
    }
  }      
  }
-----------------------------------------------------------------------------------------------

// So parameterized constructor of base class needs to be called explicitly with super keyword
from the constructor of the derived class
public class Base5 {
   
  public Base5(int i){
    System.out.println("I am the parameter constructor of the base");
  }
 
  }
  public class Derived5 extends Base5 {
     public Derived5(int a,int b){
     super(a);
     System.out.println("I am the parameterized constructor of the subclass");
    } 
 }
 
  public class Inherit5{
    public static void main(String args[]){
     Derived5 derived=new Derived5(1,2);
    }
  }      
  }
--------------------------------------------------------------------------------
// Compilation error as Derived class parameterized will call the default/parameterless
// constructor but as we have Parameterized constructorin the base class so the default constructor is not provided in the base and we have explicitly declare a parameterless constructor in the base class.
// during the compilation.
public class Base6 {
   
  public Base6(int i){
    System.out.println("I am the parameter constructor of the base");
  }
 
  }
  public class Derived6 extends Base6 {
     public Derived6(int a,int b){
     //super(a);
     System.out.println("I am the parameterized constructor of the subclass");
    } 
 }
 
  public class Inherit6{
    public static void main(String args[]){
     Derived6 derived=new Derived6(1,2);
    }
  }      
  }

------------------------------------------------------------------------------------
Polymorphism:-
* static polymorphism===> Method Overloading
* dynamic polymorphism===> Method Overriding

public class Number {
   private int num1;
   private int num2;
   private int num3;
   private float f1;
   private float f2;
   
  public void add(int num1, int num2, int num3){
    this.num1=num1;
    this.num2=num2;
    this.num3=num3;
    System.out.println(this.num1+this.num2+this.num3);
  }
  // We cannot keep the previous method and this method as the signature is same(the method name and
  // the number and datatype of parameters). Return type is not considered to decide method   //overloading.
 /* public int add(int num1, int num2, int num3){
   this.num1=this.num1;
   this.num2=this.num2;
   this.num3=this.num3;
   return this.num1+this.num2+this.num3;
  } */

  public void add(float f1 , float f2){
   this.f1=f1;
   this.f2=f2;
   System.out.println(this.f1+this.f2);
  }

   public void add(int num1, float f1 , float f2){
   this.f1=f1;
   this.f2=f2;
   this.num1=num1;
   System.out.println(this.f1+this.f2+this.num1);
  }

  public void add(int num1, int num2, float f1 , float f2){
   this.f1=f1;
   this.f2=f2;
   this.num1=num1;
   this.num2=num2;
   System.out.println(this.f1+this.f2+this.num1+this.num2);
  }

   public void add(int num1, int num2,int num3, float f1 , float f2){
   this.f1=f1;
   this.f2=f2;
   this.num1=num1;
   this.num2=num2;
   this.num2=num3;
   System.out.println(this.f1+this.f2+this.num1+this.num2+this.num3);
  }
}

public class NumberMain{
 public static void main(String args[]) {
   Number number=new Number();
   number.add(1,2,3);
   number.add(23.45f,12.34f);
   number.add(2,34.56f,34.6f);
   number.add(2,3,12.45f,12.23f);
   number.add(1,2,3,13.43f,23.456f);
  }
 }
-----------------------------------------------------------------------------------------------
   